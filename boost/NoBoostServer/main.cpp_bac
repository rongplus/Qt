/* A simple server in the internet domain using TCP
   The port number is passed as an argument */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <thread>
#include <vector>

using namespace std;
vector<thread> lt_thread;

void error(const char *msg)
{
    perror(msg);
    exit(1);
}

void listen_thd(int sockfd)
{
   
}

void recv_msg(int sock)
{
    char buffer[256];
    int n = read(sock,buffer,255);
    while (n >=0)
    {
        printf("%s\n",buffer);
        n = read(sock,buffer,255);
        if( n > 0)
        {
            char buf[] = "Get your message";
             write(sock,buf,strlen(buf));
        }
    }
    if (n < 0) 
         error("ERROR reading from socket");
}

void write_msg(int sockfd)
{
    char buffer[256];
    while(true)
    {
        printf("Please enter the message: ");
        bzero(buffer,256);
        fgets(buffer,255,stdin);
        int n = write(sockfd,buffer,strlen(buffer));
        if (n < 0) 
        {
             error("ERROR writing to socket");
             break;
        }
    }
    
}


int main(int argc, char *argv[])
{
     int sockfd, newsockfd, portno;
     socklen_t clilen;
     char buffer[256];
     struct sockaddr_in serv_addr, cli_addr;
     int n;
     if (argc < 2) {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
     }
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0) 
        error("ERROR opening socket");
     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = atoi(argv[1]);
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = INADDR_ANY;
     serv_addr.sin_port = htons(portno);
     if (::bind(sockfd, (struct sockaddr *) &serv_addr,
              sizeof(serv_addr)) < 0) 
              error("ERROR on binding");
     listen(sockfd,5);
     while(true)
     {
        clilen = sizeof(cli_addr);
         newsockfd = accept(sockfd, 
                     (struct sockaddr *) &cli_addr, 
                     &clilen);
         if (newsockfd < 0) 
              error("ERROR on accept");
          thread accept_thd( recv_msg, newsockfd);
          lt_thread.push_back( std::move(accept_thd));
     }
     
   
     close(newsockfd);
     close(sockfd);

     for (auto& th : lt_thread) 
        th.join();

     return 0; 
}

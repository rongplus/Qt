// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fldata.proto

#ifndef PROTOBUF_fldata_2eproto__INCLUDED
#define PROTOBUF_fldata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class PRO_DayLightSaving;
class PRO_DayLightSavingDefaultTypeInternal;
extern PRO_DayLightSavingDefaultTypeInternal _PRO_DayLightSaving_default_instance_;
class PRO_TIMER;
class PRO_TIMERDefaultTypeInternal;
extern PRO_TIMERDefaultTypeInternal _PRO_TIMER_default_instance_;
class Pro_Floor;
class Pro_FloorDefaultTypeInternal;
extern Pro_FloorDefaultTypeInternal _Pro_Floor_default_instance_;
class Pro_Job;
class Pro_JobDefaultTypeInternal;
extern Pro_JobDefaultTypeInternal _Pro_Job_default_instance_;
class Pro_Point;
class Pro_PointDefaultTypeInternal;
extern Pro_PointDefaultTypeInternal _Pro_Point_default_instance_;
class Pro_WIO;
class Pro_WIODefaultTypeInternal;
extern Pro_WIODefaultTypeInternal _Pro_WIO_default_instance_;
class Pro_ZC;
class Pro_ZCDefaultTypeInternal;
extern Pro_ZCDefaultTypeInternal _Pro_ZC_default_instance_;
class Pro_ZCIO;
class Pro_ZCIODefaultTypeInternal;
extern Pro_ZCIODefaultTypeInternal _Pro_ZCIO_default_instance_;

namespace protobuf_fldata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fldata_2eproto

// ===================================================================

class Pro_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro_Point) */ {
 public:
  Pro_Point();
  virtual ~Pro_Point();

  Pro_Point(const Pro_Point& from);

  inline Pro_Point& operator=(const Pro_Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_Point& default_instance();

  static inline const Pro_Point* internal_default_instance() {
    return reinterpret_cast<const Pro_Point*>(
               &_Pro_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Pro_Point* other);

  // implements Message ----------------------------------------------

  inline Pro_Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Pro_Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pro_Point& from);
  void MergeFrom(const Pro_Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pro_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:Pro_Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PRO_TIMER : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PRO_TIMER) */ {
 public:
  PRO_TIMER();
  virtual ~PRO_TIMER();

  PRO_TIMER(const PRO_TIMER& from);

  inline PRO_TIMER& operator=(const PRO_TIMER& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRO_TIMER& default_instance();

  static inline const PRO_TIMER* internal_default_instance() {
    return reinterpret_cast<const PRO_TIMER*>(
               &_PRO_TIMER_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PRO_TIMER* other);

  // implements Message ----------------------------------------------

  inline PRO_TIMER* New() const PROTOBUF_FINAL { return New(NULL); }

  PRO_TIMER* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PRO_TIMER& from);
  void MergeFrom(const PRO_TIMER& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PRO_TIMER* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PRO_TIMER)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 duration_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PRO_DayLightSaving : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PRO_DayLightSaving) */ {
 public:
  PRO_DayLightSaving();
  virtual ~PRO_DayLightSaving();

  PRO_DayLightSaving(const PRO_DayLightSaving& from);

  inline PRO_DayLightSaving& operator=(const PRO_DayLightSaving& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRO_DayLightSaving& default_instance();

  static inline const PRO_DayLightSaving* internal_default_instance() {
    return reinterpret_cast<const PRO_DayLightSaving*>(
               &_PRO_DayLightSaving_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PRO_DayLightSaving* other);

  // implements Message ----------------------------------------------

  inline PRO_DayLightSaving* New() const PROTOBUF_FINAL { return New(NULL); }

  PRO_DayLightSaving* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PRO_DayLightSaving& from);
  void MergeFrom(const PRO_DayLightSaving& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PRO_DayLightSaving* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 month = 1;
  void clear_month();
  static const int kMonthFieldNumber = 1;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // int32 week = 2;
  void clear_week();
  static const int kWeekFieldNumber = 2;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // int32 dayOfWeek = 3;
  void clear_dayofweek();
  static const int kDayOfWeekFieldNumber = 3;
  ::google::protobuf::int32 dayofweek() const;
  void set_dayofweek(::google::protobuf::int32 value);

  // int32 hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::int32 hour() const;
  void set_hour(::google::protobuf::int32 value);

  // int32 min = 5;
  void clear_min();
  static const int kMinFieldNumber = 5;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PRO_DayLightSaving)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 dayofweek_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 min_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pro_WIO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro_WIO) */ {
 public:
  Pro_WIO();
  virtual ~Pro_WIO();

  Pro_WIO(const Pro_WIO& from);

  inline Pro_WIO& operator=(const Pro_WIO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_WIO& default_instance();

  static inline const Pro_WIO* internal_default_instance() {
    return reinterpret_cast<const Pro_WIO*>(
               &_Pro_WIO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Pro_WIO* other);

  // implements Message ----------------------------------------------

  inline Pro_WIO* New() const PROTOBUF_FINAL { return New(NULL); }

  Pro_WIO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pro_WIO& from);
  void MergeFrom(const Pro_WIO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pro_WIO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string GUID = 2;
  void clear_guid();
  static const int kGUIDFieldNumber = 2;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // string Location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string MACAddr = 4;
  void clear_macaddr();
  static const int kMACAddrFieldNumber = 4;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // string Model = 5;
  void clear_model();
  static const int kModelFieldNumber = 5;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string Name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Signaling = 8;
  void clear_signaling();
  static const int kSignalingFieldNumber = 8;
  const ::std::string& signaling() const;
  void set_signaling(const ::std::string& value);
  #if LANG_CXX11
  void set_signaling(::std::string&& value);
  #endif
  void set_signaling(const char* value);
  void set_signaling(const char* value, size_t size);
  ::std::string* mutable_signaling();
  ::std::string* release_signaling();
  void set_allocated_signaling(::std::string* signaling);

  // string Type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string WIOType = 11;
  void clear_wiotype();
  static const int kWIOTypeFieldNumber = 11;
  const ::std::string& wiotype() const;
  void set_wiotype(const ::std::string& value);
  #if LANG_CXX11
  void set_wiotype(::std::string&& value);
  #endif
  void set_wiotype(const char* value);
  void set_wiotype(const char* value, size_t size);
  ::std::string* mutable_wiotype();
  ::std::string* release_wiotype();
  void set_allocated_wiotype(::std::string* wiotype);

  // string Corrs = 12;
  void clear_corrs();
  static const int kCorrsFieldNumber = 12;
  const ::std::string& corrs() const;
  void set_corrs(const ::std::string& value);
  #if LANG_CXX11
  void set_corrs(::std::string&& value);
  #endif
  void set_corrs(const char* value);
  void set_corrs(const char* value, size_t size);
  ::std::string* mutable_corrs();
  ::std::string* release_corrs();
  void set_allocated_corrs(::std::string* corrs);

  // string Value = 13;
  void clear_value();
  static const int kValueFieldNumber = 13;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string Comment = 14;
  void clear_comment();
  static const int kCommentFieldNumber = 14;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // .Pro_Point Position = 7;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  const ::Pro_Point& position() const;
  ::Pro_Point* mutable_position();
  ::Pro_Point* release_position();
  void set_allocated_position(::Pro_Point* position);

  // .Pro_Point Scale = 10;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 10;
  const ::Pro_Point& scale() const;
  ::Pro_Point* mutable_scale();
  ::Pro_Point* release_scale();
  void set_allocated_scale(::Pro_Point* scale);

  // @@protoc_insertion_point(class_scope:Pro_WIO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr signaling_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr wiotype_;
  ::google::protobuf::internal::ArenaStringPtr corrs_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::Pro_Point* position_;
  ::Pro_Point* scale_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pro_ZCIO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro_ZCIO) */ {
 public:
  Pro_ZCIO();
  virtual ~Pro_ZCIO();

  Pro_ZCIO(const Pro_ZCIO& from);

  inline Pro_ZCIO& operator=(const Pro_ZCIO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_ZCIO& default_instance();

  static inline const Pro_ZCIO* internal_default_instance() {
    return reinterpret_cast<const Pro_ZCIO*>(
               &_Pro_ZCIO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Pro_ZCIO* other);

  // implements Message ----------------------------------------------

  inline Pro_ZCIO* New() const PROTOBUF_FINAL { return New(NULL); }

  Pro_ZCIO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pro_ZCIO& from);
  void MergeFrom(const Pro_ZCIO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pro_ZCIO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string Corrs = 4;
  void clear_corrs();
  static const int kCorrsFieldNumber = 4;
  const ::std::string& corrs() const;
  void set_corrs(const ::std::string& value);
  #if LANG_CXX11
  void set_corrs(::std::string&& value);
  #endif
  void set_corrs(const char* value);
  void set_corrs(const char* value, size_t size);
  ::std::string* mutable_corrs();
  ::std::string* release_corrs();
  void set_allocated_corrs(::std::string* corrs);

  // string CktProcessType = 5;
  void clear_cktprocesstype();
  static const int kCktProcessTypeFieldNumber = 5;
  const ::std::string& cktprocesstype() const;
  void set_cktprocesstype(const ::std::string& value);
  #if LANG_CXX11
  void set_cktprocesstype(::std::string&& value);
  #endif
  void set_cktprocesstype(const char* value);
  void set_cktprocesstype(const char* value, size_t size);
  ::std::string* mutable_cktprocesstype();
  ::std::string* release_cktprocesstype();
  void set_allocated_cktprocesstype(::std::string* cktprocesstype);

  // string Tag = 6;
  void clear_tag();
  static const int kTagFieldNumber = 6;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // string Comment = 7;
  void clear_comment();
  static const int kCommentFieldNumber = 7;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:Pro_ZCIO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr corrs_;
  ::google::protobuf::internal::ArenaStringPtr cktprocesstype_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pro_ZC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro_ZC) */ {
 public:
  Pro_ZC();
  virtual ~Pro_ZC();

  Pro_ZC(const Pro_ZC& from);

  inline Pro_ZC& operator=(const Pro_ZC& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_ZC& default_instance();

  static inline const Pro_ZC* internal_default_instance() {
    return reinterpret_cast<const Pro_ZC*>(
               &_Pro_ZC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Pro_ZC* other);

  // implements Message ----------------------------------------------

  inline Pro_ZC* New() const PROTOBUF_FINAL { return New(NULL); }

  Pro_ZC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pro_ZC& from);
  void MergeFrom(const Pro_ZC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pro_ZC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro_WIO WIO = 10;
  int wio_size() const;
  void clear_wio();
  static const int kWIOFieldNumber = 10;
  const ::Pro_WIO& wio(int index) const;
  ::Pro_WIO* mutable_wio(int index);
  ::Pro_WIO* add_wio();
  ::google::protobuf::RepeatedPtrField< ::Pro_WIO >*
      mutable_wio();
  const ::google::protobuf::RepeatedPtrField< ::Pro_WIO >&
      wio() const;

  // repeated .Pro_ZCIO Input = 11;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 11;
  const ::Pro_ZCIO& input(int index) const;
  ::Pro_ZCIO* mutable_input(int index);
  ::Pro_ZCIO* add_input();
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
      mutable_input();
  const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
      input() const;

  // repeated .Pro_ZCIO RELAY = 12;
  int relay_size() const;
  void clear_relay();
  static const int kRELAYFieldNumber = 12;
  const ::Pro_ZCIO& relay(int index) const;
  ::Pro_ZCIO* mutable_relay(int index);
  ::Pro_ZCIO* add_relay();
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
      mutable_relay();
  const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
      relay() const;

  // repeated .Pro_ZCIO LOCAL_TROUBLES = 13;
  int local_troubles_size() const;
  void clear_local_troubles();
  static const int kLOCALTROUBLESFieldNumber = 13;
  const ::Pro_ZCIO& local_troubles(int index) const;
  ::Pro_ZCIO* mutable_local_troubles(int index);
  ::Pro_ZCIO* add_local_troubles();
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
      mutable_local_troubles();
  const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
      local_troubles() const;

  // repeated .Pro_ZCIO REMOTE_TROUBLE = 14;
  int remote_trouble_size() const;
  void clear_remote_trouble();
  static const int kREMOTETROUBLEFieldNumber = 14;
  const ::Pro_ZCIO& remote_trouble(int index) const;
  ::Pro_ZCIO* mutable_remote_trouble(int index);
  ::Pro_ZCIO* add_remote_trouble();
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
      mutable_remote_trouble();
  const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
      remote_trouble() const;

  // repeated .Pro_ZCIO STATS = 15;
  int stats_size() const;
  void clear_stats();
  static const int kSTATSFieldNumber = 15;
  const ::Pro_ZCIO& stats(int index) const;
  ::Pro_ZCIO* mutable_stats(int index);
  ::Pro_ZCIO* add_stats();
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
      stats() const;

  // repeated string PassCode = 17;
  int passcode_size() const;
  void clear_passcode();
  static const int kPassCodeFieldNumber = 17;
  const ::std::string& passcode(int index) const;
  ::std::string* mutable_passcode(int index);
  void set_passcode(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_passcode(int index, ::std::string&& value);
  #endif
  void set_passcode(int index, const char* value);
  void set_passcode(int index, const char* value, size_t size);
  ::std::string* add_passcode();
  void add_passcode(const ::std::string& value);
  #if LANG_CXX11
  void add_passcode(::std::string&& value);
  #endif
  void add_passcode(const char* value);
  void add_passcode(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& passcode() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_passcode();

  // repeated .PRO_TIMER Timer = 18;
  int timer_size() const;
  void clear_timer();
  static const int kTimerFieldNumber = 18;
  const ::PRO_TIMER& timer(int index) const;
  ::PRO_TIMER* mutable_timer(int index);
  ::PRO_TIMER* add_timer();
  ::google::protobuf::RepeatedPtrField< ::PRO_TIMER >*
      mutable_timer();
  const ::google::protobuf::RepeatedPtrField< ::PRO_TIMER >&
      timer() const;

  // string Channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string GUID = 2;
  void clear_guid();
  static const int kGUIDFieldNumber = 2;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // string Location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string MACAddr = 4;
  void clear_macaddr();
  static const int kMACAddrFieldNumber = 4;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // string Name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string PANID = 6;
  void clear_panid();
  static const int kPANIDFieldNumber = 6;
  const ::std::string& panid() const;
  void set_panid(const ::std::string& value);
  #if LANG_CXX11
  void set_panid(::std::string&& value);
  #endif
  void set_panid(const char* value);
  void set_panid(const char* value, size_t size);
  ::std::string* mutable_panid();
  ::std::string* release_panid();
  void set_allocated_panid(::std::string* panid);

  // string Type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string Comment = 20;
  void clear_comment();
  static const int kCommentFieldNumber = 20;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // .Pro_Point Position = 7;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  const ::Pro_Point& position() const;
  ::Pro_Point* mutable_position();
  ::Pro_Point* release_position();
  void set_allocated_position(::Pro_Point* position);

  // .Pro_Point Scale = 9;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 9;
  const ::Pro_Point& scale() const;
  ::Pro_Point* mutable_scale();
  ::Pro_Point* release_scale();
  void set_allocated_scale(::Pro_Point* scale);

  // uint32 range = 16;
  void clear_range();
  static const int kRangeFieldNumber = 16;
  ::google::protobuf::uint32 range() const;
  void set_range(::google::protobuf::uint32 value);

  // int32 SCU_FEATURE_FLAGS = 19;
  void clear_scu_feature_flags();
  static const int kSCUFEATUREFLAGSFieldNumber = 19;
  ::google::protobuf::int32 scu_feature_flags() const;
  void set_scu_feature_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pro_ZC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pro_WIO > wio_;
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO > input_;
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO > relay_;
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO > local_troubles_;
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO > remote_trouble_;
  ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO > stats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> passcode_;
  ::google::protobuf::RepeatedPtrField< ::PRO_TIMER > timer_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr panid_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::Pro_Point* position_;
  ::Pro_Point* scale_;
  ::google::protobuf::uint32 range_;
  ::google::protobuf::int32 scu_feature_flags_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pro_Floor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro_Floor) */ {
 public:
  Pro_Floor();
  virtual ~Pro_Floor();

  Pro_Floor(const Pro_Floor& from);

  inline Pro_Floor& operator=(const Pro_Floor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_Floor& default_instance();

  static inline const Pro_Floor* internal_default_instance() {
    return reinterpret_cast<const Pro_Floor*>(
               &_Pro_Floor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Pro_Floor* other);

  // implements Message ----------------------------------------------

  inline Pro_Floor* New() const PROTOBUF_FINAL { return New(NULL); }

  Pro_Floor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pro_Floor& from);
  void MergeFrom(const Pro_Floor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pro_Floor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro_ZC ZC = 9;
  int zc_size() const;
  void clear_zc();
  static const int kZCFieldNumber = 9;
  const ::Pro_ZC& zc(int index) const;
  ::Pro_ZC* mutable_zc(int index);
  ::Pro_ZC* add_zc();
  ::google::protobuf::RepeatedPtrField< ::Pro_ZC >*
      mutable_zc();
  const ::google::protobuf::RepeatedPtrField< ::Pro_ZC >&
      zc() const;

  // string Comment = 1;
  void clear_comment();
  static const int kCommentFieldNumber = 1;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string FloorGraph = 2;
  void clear_floorgraph();
  static const int kFloorGraphFieldNumber = 2;
  const ::std::string& floorgraph() const;
  void set_floorgraph(const ::std::string& value);
  #if LANG_CXX11
  void set_floorgraph(::std::string&& value);
  #endif
  void set_floorgraph(const char* value);
  void set_floorgraph(const char* value, size_t size);
  ::std::string* mutable_floorgraph();
  ::std::string* release_floorgraph();
  void set_allocated_floorgraph(::std::string* floorgraph);

  // string GUID = 3;
  void clear_guid();
  static const int kGUIDFieldNumber = 3;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // string Name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string unit_of_measure = 8;
  void clear_unit_of_measure();
  static const int kUnitOfMeasureFieldNumber = 8;
  const ::std::string& unit_of_measure() const;
  void set_unit_of_measure(const ::std::string& value);
  #if LANG_CXX11
  void set_unit_of_measure(::std::string&& value);
  #endif
  void set_unit_of_measure(const char* value);
  void set_unit_of_measure(const char* value, size_t size);
  ::std::string* mutable_unit_of_measure();
  ::std::string* release_unit_of_measure();
  void set_allocated_unit_of_measure(::std::string* unit_of_measure);

  // string plotting_scale = 10;
  void clear_plotting_scale();
  static const int kPlottingScaleFieldNumber = 10;
  const ::std::string& plotting_scale() const;
  void set_plotting_scale(const ::std::string& value);
  #if LANG_CXX11
  void set_plotting_scale(::std::string&& value);
  #endif
  void set_plotting_scale(const char* value);
  void set_plotting_scale(const char* value, size_t size);
  ::std::string* mutable_plotting_scale();
  ::std::string* release_plotting_scale();
  void set_allocated_plotting_scale(::std::string* plotting_scale);

  // .Pro_Point Position = 5;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  const ::Pro_Point& position() const;
  ::Pro_Point* mutable_position();
  ::Pro_Point* release_position();
  void set_allocated_position(::Pro_Point* position);

  // .Pro_Point Scale = 7;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 7;
  const ::Pro_Point& scale() const;
  ::Pro_Point* mutable_scale();
  ::Pro_Point* release_scale();
  void set_allocated_scale(::Pro_Point* scale);

  // @@protoc_insertion_point(class_scope:Pro_Floor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pro_ZC > zc_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr floorgraph_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr unit_of_measure_;
  ::google::protobuf::internal::ArenaStringPtr plotting_scale_;
  ::Pro_Point* position_;
  ::Pro_Point* scale_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pro_Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro_Job) */ {
 public:
  Pro_Job();
  virtual ~Pro_Job();

  Pro_Job(const Pro_Job& from);

  inline Pro_Job& operator=(const Pro_Job& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pro_Job& default_instance();

  static inline const Pro_Job* internal_default_instance() {
    return reinterpret_cast<const Pro_Job*>(
               &_Pro_Job_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Pro_Job* other);

  // implements Message ----------------------------------------------

  inline Pro_Job* New() const PROTOBUF_FINAL { return New(NULL); }

  Pro_Job* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pro_Job& from);
  void MergeFrom(const Pro_Job& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pro_Job* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro_Floor Floor = 7;
  int floor_size() const;
  void clear_floor();
  static const int kFloorFieldNumber = 7;
  const ::Pro_Floor& floor(int index) const;
  ::Pro_Floor* mutable_floor(int index);
  ::Pro_Floor* add_floor();
  ::google::protobuf::RepeatedPtrField< ::Pro_Floor >*
      mutable_floor();
  const ::google::protobuf::RepeatedPtrField< ::Pro_Floor >&
      floor() const;

  // repeated .PRO_DayLightSaving DayLight = 8;
  int daylight_size() const;
  void clear_daylight();
  static const int kDayLightFieldNumber = 8;
  const ::PRO_DayLightSaving& daylight(int index) const;
  ::PRO_DayLightSaving* mutable_daylight(int index);
  ::PRO_DayLightSaving* add_daylight();
  ::google::protobuf::RepeatedPtrField< ::PRO_DayLightSaving >*
      mutable_daylight();
  const ::google::protobuf::RepeatedPtrField< ::PRO_DayLightSaving >&
      daylight() const;

  // string Comment = 1;
  void clear_comment();
  static const int kCommentFieldNumber = 1;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string GUID = 2;
  void clear_guid();
  static const int kGUIDFieldNumber = 2;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // string JobPath = 3;
  void clear_jobpath();
  static const int kJobPathFieldNumber = 3;
  const ::std::string& jobpath() const;
  void set_jobpath(const ::std::string& value);
  #if LANG_CXX11
  void set_jobpath(::std::string&& value);
  #endif
  void set_jobpath(const char* value);
  void set_jobpath(const char* value, size_t size);
  ::std::string* mutable_jobpath();
  ::std::string* release_jobpath();
  void set_allocated_jobpath(::std::string* jobpath);

  // string Name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Standard = 5;
  void clear_standard();
  static const int kStandardFieldNumber = 5;
  const ::std::string& standard() const;
  void set_standard(const ::std::string& value);
  #if LANG_CXX11
  void set_standard(::std::string&& value);
  #endif
  void set_standard(const char* value);
  void set_standard(const char* value, size_t size);
  ::std::string* mutable_standard();
  ::std::string* release_standard();
  void set_allocated_standard(::std::string* standard);

  // string Type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int32 DailyAdjust = 9;
  void clear_dailyadjust();
  static const int kDailyAdjustFieldNumber = 9;
  ::google::protobuf::int32 dailyadjust() const;
  void set_dailyadjust(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pro_Job)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pro_Floor > floor_;
  ::google::protobuf::RepeatedPtrField< ::PRO_DayLightSaving > daylight_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr jobpath_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr standard_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 dailyadjust_;
  mutable int _cached_size_;
  friend struct protobuf_fldata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Pro_Point

// float x = 1;
inline void Pro_Point::clear_x() {
  x_ = 0;
}
inline float Pro_Point::x() const {
  // @@protoc_insertion_point(field_get:Pro_Point.x)
  return x_;
}
inline void Pro_Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Pro_Point.x)
}

// float y = 2;
inline void Pro_Point::clear_y() {
  y_ = 0;
}
inline float Pro_Point::y() const {
  // @@protoc_insertion_point(field_get:Pro_Point.y)
  return y_;
}
inline void Pro_Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Pro_Point.y)
}

// -------------------------------------------------------------------

// PRO_TIMER

// int32 ID = 1;
inline void PRO_TIMER::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 PRO_TIMER::id() const {
  // @@protoc_insertion_point(field_get:PRO_TIMER.ID)
  return id_;
}
inline void PRO_TIMER::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PRO_TIMER.ID)
}

// int32 Duration = 2;
inline void PRO_TIMER::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 PRO_TIMER::duration() const {
  // @@protoc_insertion_point(field_get:PRO_TIMER.Duration)
  return duration_;
}
inline void PRO_TIMER::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:PRO_TIMER.Duration)
}

// -------------------------------------------------------------------

// PRO_DayLightSaving

// int32 month = 1;
inline void PRO_DayLightSaving::clear_month() {
  month_ = 0;
}
inline ::google::protobuf::int32 PRO_DayLightSaving::month() const {
  // @@protoc_insertion_point(field_get:PRO_DayLightSaving.month)
  return month_;
}
inline void PRO_DayLightSaving::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:PRO_DayLightSaving.month)
}

// int32 week = 2;
inline void PRO_DayLightSaving::clear_week() {
  week_ = 0;
}
inline ::google::protobuf::int32 PRO_DayLightSaving::week() const {
  // @@protoc_insertion_point(field_get:PRO_DayLightSaving.week)
  return week_;
}
inline void PRO_DayLightSaving::set_week(::google::protobuf::int32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:PRO_DayLightSaving.week)
}

// int32 dayOfWeek = 3;
inline void PRO_DayLightSaving::clear_dayofweek() {
  dayofweek_ = 0;
}
inline ::google::protobuf::int32 PRO_DayLightSaving::dayofweek() const {
  // @@protoc_insertion_point(field_get:PRO_DayLightSaving.dayOfWeek)
  return dayofweek_;
}
inline void PRO_DayLightSaving::set_dayofweek(::google::protobuf::int32 value) {
  
  dayofweek_ = value;
  // @@protoc_insertion_point(field_set:PRO_DayLightSaving.dayOfWeek)
}

// int32 hour = 4;
inline void PRO_DayLightSaving::clear_hour() {
  hour_ = 0;
}
inline ::google::protobuf::int32 PRO_DayLightSaving::hour() const {
  // @@protoc_insertion_point(field_get:PRO_DayLightSaving.hour)
  return hour_;
}
inline void PRO_DayLightSaving::set_hour(::google::protobuf::int32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:PRO_DayLightSaving.hour)
}

// int32 min = 5;
inline void PRO_DayLightSaving::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 PRO_DayLightSaving::min() const {
  // @@protoc_insertion_point(field_get:PRO_DayLightSaving.min)
  return min_;
}
inline void PRO_DayLightSaving::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:PRO_DayLightSaving.min)
}

// -------------------------------------------------------------------

// Pro_WIO

// string Channel = 1;
inline void Pro_WIO::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::channel() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Channel)
  return channel_.GetNoArena();
}
inline void Pro_WIO::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Channel)
}
#if LANG_CXX11
inline void Pro_WIO::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Channel)
}
#endif
inline void Pro_WIO::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Channel)
}
inline void Pro_WIO::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Channel)
}
inline ::std::string* Pro_WIO::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_channel() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Channel)
}

// string GUID = 2;
inline void Pro_WIO::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::guid() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.GUID)
  return guid_.GetNoArena();
}
inline void Pro_WIO::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.GUID)
}
#if LANG_CXX11
inline void Pro_WIO::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.GUID)
}
#endif
inline void Pro_WIO::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.GUID)
}
inline void Pro_WIO::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.GUID)
}
inline ::std::string* Pro_WIO::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.GUID)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_guid() {
  // @@protoc_insertion_point(field_release:Pro_WIO.GUID)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.GUID)
}

// string Location = 3;
inline void Pro_WIO::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::location() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Location)
  return location_.GetNoArena();
}
inline void Pro_WIO::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Location)
}
#if LANG_CXX11
inline void Pro_WIO::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Location)
}
#endif
inline void Pro_WIO::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Location)
}
inline void Pro_WIO::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Location)
}
inline ::std::string* Pro_WIO::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_location() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Location)
}

// string MACAddr = 4;
inline void Pro_WIO::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::macaddr() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.MACAddr)
  return macaddr_.GetNoArena();
}
inline void Pro_WIO::set_macaddr(const ::std::string& value) {
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.MACAddr)
}
#if LANG_CXX11
inline void Pro_WIO::set_macaddr(::std::string&& value) {
  
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.MACAddr)
}
#endif
inline void Pro_WIO::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.MACAddr)
}
inline void Pro_WIO::set_macaddr(const char* value, size_t size) {
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.MACAddr)
}
inline ::std::string* Pro_WIO::mutable_macaddr() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.MACAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_macaddr() {
  // @@protoc_insertion_point(field_release:Pro_WIO.MACAddr)
  
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    
  } else {
    
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.MACAddr)
}

// string Model = 5;
inline void Pro_WIO::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::model() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Model)
  return model_.GetNoArena();
}
inline void Pro_WIO::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Model)
}
#if LANG_CXX11
inline void Pro_WIO::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Model)
}
#endif
inline void Pro_WIO::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Model)
}
inline void Pro_WIO::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Model)
}
inline ::std::string* Pro_WIO::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_model() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Model)
}

// string Name = 6;
inline void Pro_WIO::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::name() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Name)
  return name_.GetNoArena();
}
inline void Pro_WIO::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Name)
}
#if LANG_CXX11
inline void Pro_WIO::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Name)
}
#endif
inline void Pro_WIO::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Name)
}
inline void Pro_WIO::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Name)
}
inline ::std::string* Pro_WIO::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_name() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Name)
}

// .Pro_Point Position = 7;
inline bool Pro_WIO::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Pro_WIO::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::Pro_Point& Pro_WIO::position() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Position)
  return position_ != NULL ? *position_
                         : *::Pro_Point::internal_default_instance();
}
inline ::Pro_Point* Pro_WIO::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::Pro_Point;
  }
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Position)
  return position_;
}
inline ::Pro_Point* Pro_WIO::release_position() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Position)
  
  ::Pro_Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pro_WIO::set_allocated_position(::Pro_Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Position)
}

// string Signaling = 8;
inline void Pro_WIO::clear_signaling() {
  signaling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::signaling() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Signaling)
  return signaling_.GetNoArena();
}
inline void Pro_WIO::set_signaling(const ::std::string& value) {
  
  signaling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Signaling)
}
#if LANG_CXX11
inline void Pro_WIO::set_signaling(::std::string&& value) {
  
  signaling_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Signaling)
}
#endif
inline void Pro_WIO::set_signaling(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signaling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Signaling)
}
inline void Pro_WIO::set_signaling(const char* value, size_t size) {
  
  signaling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Signaling)
}
inline ::std::string* Pro_WIO::mutable_signaling() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Signaling)
  return signaling_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_signaling() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Signaling)
  
  return signaling_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_signaling(::std::string* signaling) {
  if (signaling != NULL) {
    
  } else {
    
  }
  signaling_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signaling);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Signaling)
}

// string Type = 9;
inline void Pro_WIO::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::type() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Type)
  return type_.GetNoArena();
}
inline void Pro_WIO::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Type)
}
#if LANG_CXX11
inline void Pro_WIO::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Type)
}
#endif
inline void Pro_WIO::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Type)
}
inline void Pro_WIO::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Type)
}
inline ::std::string* Pro_WIO::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_type() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Type)
}

// .Pro_Point Scale = 10;
inline bool Pro_WIO::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline void Pro_WIO::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
inline const ::Pro_Point& Pro_WIO::scale() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Scale)
  return scale_ != NULL ? *scale_
                         : *::Pro_Point::internal_default_instance();
}
inline ::Pro_Point* Pro_WIO::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::Pro_Point;
  }
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Scale)
  return scale_;
}
inline ::Pro_Point* Pro_WIO::release_scale() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Scale)
  
  ::Pro_Point* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void Pro_WIO::set_allocated_scale(::Pro_Point* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Scale)
}

// string WIOType = 11;
inline void Pro_WIO::clear_wiotype() {
  wiotype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::wiotype() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.WIOType)
  return wiotype_.GetNoArena();
}
inline void Pro_WIO::set_wiotype(const ::std::string& value) {
  
  wiotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.WIOType)
}
#if LANG_CXX11
inline void Pro_WIO::set_wiotype(::std::string&& value) {
  
  wiotype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.WIOType)
}
#endif
inline void Pro_WIO::set_wiotype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wiotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.WIOType)
}
inline void Pro_WIO::set_wiotype(const char* value, size_t size) {
  
  wiotype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.WIOType)
}
inline ::std::string* Pro_WIO::mutable_wiotype() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.WIOType)
  return wiotype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_wiotype() {
  // @@protoc_insertion_point(field_release:Pro_WIO.WIOType)
  
  return wiotype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_wiotype(::std::string* wiotype) {
  if (wiotype != NULL) {
    
  } else {
    
  }
  wiotype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wiotype);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.WIOType)
}

// string Corrs = 12;
inline void Pro_WIO::clear_corrs() {
  corrs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::corrs() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Corrs)
  return corrs_.GetNoArena();
}
inline void Pro_WIO::set_corrs(const ::std::string& value) {
  
  corrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Corrs)
}
#if LANG_CXX11
inline void Pro_WIO::set_corrs(::std::string&& value) {
  
  corrs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Corrs)
}
#endif
inline void Pro_WIO::set_corrs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  corrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Corrs)
}
inline void Pro_WIO::set_corrs(const char* value, size_t size) {
  
  corrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Corrs)
}
inline ::std::string* Pro_WIO::mutable_corrs() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Corrs)
  return corrs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_corrs() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Corrs)
  
  return corrs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_corrs(::std::string* corrs) {
  if (corrs != NULL) {
    
  } else {
    
  }
  corrs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), corrs);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Corrs)
}

// string Value = 13;
inline void Pro_WIO::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::value() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Value)
  return value_.GetNoArena();
}
inline void Pro_WIO::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Value)
}
#if LANG_CXX11
inline void Pro_WIO::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Value)
}
#endif
inline void Pro_WIO::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Value)
}
inline void Pro_WIO::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Value)
}
inline ::std::string* Pro_WIO::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_value() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Value)
}

// string Comment = 14;
inline void Pro_WIO::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_WIO::comment() const {
  // @@protoc_insertion_point(field_get:Pro_WIO.Comment)
  return comment_.GetNoArena();
}
inline void Pro_WIO::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_WIO.Comment)
}
#if LANG_CXX11
inline void Pro_WIO::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_WIO.Comment)
}
#endif
inline void Pro_WIO::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_WIO.Comment)
}
inline void Pro_WIO::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_WIO.Comment)
}
inline ::std::string* Pro_WIO::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:Pro_WIO.Comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_WIO::release_comment() {
  // @@protoc_insertion_point(field_release:Pro_WIO.Comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_WIO::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:Pro_WIO.Comment)
}

// -------------------------------------------------------------------

// Pro_ZCIO

// string Name = 1;
inline void Pro_ZCIO::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::name() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.Name)
  return name_.GetNoArena();
}
inline void Pro_ZCIO::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.Name)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.Name)
}
#endif
inline void Pro_ZCIO::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.Name)
}
inline void Pro_ZCIO::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.Name)
}
inline ::std::string* Pro_ZCIO::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_name() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.Name)
}

// string Type = 2;
inline void Pro_ZCIO::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::type() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.Type)
  return type_.GetNoArena();
}
inline void Pro_ZCIO::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.Type)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.Type)
}
#endif
inline void Pro_ZCIO::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.Type)
}
inline void Pro_ZCIO::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.Type)
}
inline ::std::string* Pro_ZCIO::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_type() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.Type)
}

// string Value = 3;
inline void Pro_ZCIO::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::value() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.Value)
  return value_.GetNoArena();
}
inline void Pro_ZCIO::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.Value)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.Value)
}
#endif
inline void Pro_ZCIO::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.Value)
}
inline void Pro_ZCIO::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.Value)
}
inline ::std::string* Pro_ZCIO::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_value() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.Value)
}

// string Corrs = 4;
inline void Pro_ZCIO::clear_corrs() {
  corrs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::corrs() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.Corrs)
  return corrs_.GetNoArena();
}
inline void Pro_ZCIO::set_corrs(const ::std::string& value) {
  
  corrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.Corrs)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_corrs(::std::string&& value) {
  
  corrs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.Corrs)
}
#endif
inline void Pro_ZCIO::set_corrs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  corrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.Corrs)
}
inline void Pro_ZCIO::set_corrs(const char* value, size_t size) {
  
  corrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.Corrs)
}
inline ::std::string* Pro_ZCIO::mutable_corrs() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.Corrs)
  return corrs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_corrs() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.Corrs)
  
  return corrs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_corrs(::std::string* corrs) {
  if (corrs != NULL) {
    
  } else {
    
  }
  corrs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), corrs);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.Corrs)
}

// string CktProcessType = 5;
inline void Pro_ZCIO::clear_cktprocesstype() {
  cktprocesstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::cktprocesstype() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.CktProcessType)
  return cktprocesstype_.GetNoArena();
}
inline void Pro_ZCIO::set_cktprocesstype(const ::std::string& value) {
  
  cktprocesstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.CktProcessType)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_cktprocesstype(::std::string&& value) {
  
  cktprocesstype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.CktProcessType)
}
#endif
inline void Pro_ZCIO::set_cktprocesstype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cktprocesstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.CktProcessType)
}
inline void Pro_ZCIO::set_cktprocesstype(const char* value, size_t size) {
  
  cktprocesstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.CktProcessType)
}
inline ::std::string* Pro_ZCIO::mutable_cktprocesstype() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.CktProcessType)
  return cktprocesstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_cktprocesstype() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.CktProcessType)
  
  return cktprocesstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_cktprocesstype(::std::string* cktprocesstype) {
  if (cktprocesstype != NULL) {
    
  } else {
    
  }
  cktprocesstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cktprocesstype);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.CktProcessType)
}

// string Tag = 6;
inline void Pro_ZCIO::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::tag() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.Tag)
  return tag_.GetNoArena();
}
inline void Pro_ZCIO::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.Tag)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.Tag)
}
#endif
inline void Pro_ZCIO::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.Tag)
}
inline void Pro_ZCIO::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.Tag)
}
inline ::std::string* Pro_ZCIO::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.Tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_tag() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.Tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.Tag)
}

// string Comment = 7;
inline void Pro_ZCIO::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZCIO::comment() const {
  // @@protoc_insertion_point(field_get:Pro_ZCIO.Comment)
  return comment_.GetNoArena();
}
inline void Pro_ZCIO::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZCIO.Comment)
}
#if LANG_CXX11
inline void Pro_ZCIO::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZCIO.Comment)
}
#endif
inline void Pro_ZCIO::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZCIO.Comment)
}
inline void Pro_ZCIO::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZCIO.Comment)
}
inline ::std::string* Pro_ZCIO::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZCIO.Comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZCIO::release_comment() {
  // @@protoc_insertion_point(field_release:Pro_ZCIO.Comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZCIO::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZCIO.Comment)
}

// -------------------------------------------------------------------

// Pro_ZC

// string Channel = 1;
inline void Pro_ZC::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::channel() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Channel)
  return channel_.GetNoArena();
}
inline void Pro_ZC::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.Channel)
}
#if LANG_CXX11
inline void Pro_ZC::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.Channel)
}
#endif
inline void Pro_ZC::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.Channel)
}
inline void Pro_ZC::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.Channel)
}
inline ::std::string* Pro_ZC::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_channel() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Channel)
}

// string GUID = 2;
inline void Pro_ZC::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::guid() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.GUID)
  return guid_.GetNoArena();
}
inline void Pro_ZC::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.GUID)
}
#if LANG_CXX11
inline void Pro_ZC::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.GUID)
}
#endif
inline void Pro_ZC::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.GUID)
}
inline void Pro_ZC::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.GUID)
}
inline ::std::string* Pro_ZC::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.GUID)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_guid() {
  // @@protoc_insertion_point(field_release:Pro_ZC.GUID)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.GUID)
}

// string Location = 3;
inline void Pro_ZC::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::location() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Location)
  return location_.GetNoArena();
}
inline void Pro_ZC::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.Location)
}
#if LANG_CXX11
inline void Pro_ZC::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.Location)
}
#endif
inline void Pro_ZC::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.Location)
}
inline void Pro_ZC::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.Location)
}
inline ::std::string* Pro_ZC::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_location() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Location)
}

// string MACAddr = 4;
inline void Pro_ZC::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::macaddr() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.MACAddr)
  return macaddr_.GetNoArena();
}
inline void Pro_ZC::set_macaddr(const ::std::string& value) {
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.MACAddr)
}
#if LANG_CXX11
inline void Pro_ZC::set_macaddr(::std::string&& value) {
  
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.MACAddr)
}
#endif
inline void Pro_ZC::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.MACAddr)
}
inline void Pro_ZC::set_macaddr(const char* value, size_t size) {
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.MACAddr)
}
inline ::std::string* Pro_ZC::mutable_macaddr() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.MACAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_macaddr() {
  // @@protoc_insertion_point(field_release:Pro_ZC.MACAddr)
  
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    
  } else {
    
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.MACAddr)
}

// string Name = 5;
inline void Pro_ZC::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::name() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Name)
  return name_.GetNoArena();
}
inline void Pro_ZC::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.Name)
}
#if LANG_CXX11
inline void Pro_ZC::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.Name)
}
#endif
inline void Pro_ZC::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.Name)
}
inline void Pro_ZC::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.Name)
}
inline ::std::string* Pro_ZC::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_name() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Name)
}

// string PANID = 6;
inline void Pro_ZC::clear_panid() {
  panid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::panid() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.PANID)
  return panid_.GetNoArena();
}
inline void Pro_ZC::set_panid(const ::std::string& value) {
  
  panid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.PANID)
}
#if LANG_CXX11
inline void Pro_ZC::set_panid(::std::string&& value) {
  
  panid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.PANID)
}
#endif
inline void Pro_ZC::set_panid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  panid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.PANID)
}
inline void Pro_ZC::set_panid(const char* value, size_t size) {
  
  panid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.PANID)
}
inline ::std::string* Pro_ZC::mutable_panid() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.PANID)
  return panid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_panid() {
  // @@protoc_insertion_point(field_release:Pro_ZC.PANID)
  
  return panid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_panid(::std::string* panid) {
  if (panid != NULL) {
    
  } else {
    
  }
  panid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), panid);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.PANID)
}

// .Pro_Point Position = 7;
inline bool Pro_ZC::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Pro_ZC::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::Pro_Point& Pro_ZC::position() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Position)
  return position_ != NULL ? *position_
                         : *::Pro_Point::internal_default_instance();
}
inline ::Pro_Point* Pro_ZC::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::Pro_Point;
  }
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Position)
  return position_;
}
inline ::Pro_Point* Pro_ZC::release_position() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Position)
  
  ::Pro_Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pro_ZC::set_allocated_position(::Pro_Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Position)
}

// string Type = 8;
inline void Pro_ZC::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::type() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Type)
  return type_.GetNoArena();
}
inline void Pro_ZC::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.Type)
}
#if LANG_CXX11
inline void Pro_ZC::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.Type)
}
#endif
inline void Pro_ZC::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.Type)
}
inline void Pro_ZC::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.Type)
}
inline ::std::string* Pro_ZC::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_type() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Type)
}

// .Pro_Point Scale = 9;
inline bool Pro_ZC::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline void Pro_ZC::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
inline const ::Pro_Point& Pro_ZC::scale() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Scale)
  return scale_ != NULL ? *scale_
                         : *::Pro_Point::internal_default_instance();
}
inline ::Pro_Point* Pro_ZC::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::Pro_Point;
  }
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Scale)
  return scale_;
}
inline ::Pro_Point* Pro_ZC::release_scale() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Scale)
  
  ::Pro_Point* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void Pro_ZC::set_allocated_scale(::Pro_Point* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Scale)
}

// repeated .Pro_WIO WIO = 10;
inline int Pro_ZC::wio_size() const {
  return wio_.size();
}
inline void Pro_ZC::clear_wio() {
  wio_.Clear();
}
inline const ::Pro_WIO& Pro_ZC::wio(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.WIO)
  return wio_.Get(index);
}
inline ::Pro_WIO* Pro_ZC::mutable_wio(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.WIO)
  return wio_.Mutable(index);
}
inline ::Pro_WIO* Pro_ZC::add_wio() {
  // @@protoc_insertion_point(field_add:Pro_ZC.WIO)
  return wio_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_WIO >*
Pro_ZC::mutable_wio() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.WIO)
  return &wio_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_WIO >&
Pro_ZC::wio() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.WIO)
  return wio_;
}

// repeated .Pro_ZCIO Input = 11;
inline int Pro_ZC::input_size() const {
  return input_.size();
}
inline void Pro_ZC::clear_input() {
  input_.Clear();
}
inline const ::Pro_ZCIO& Pro_ZC::input(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Input)
  return input_.Get(index);
}
inline ::Pro_ZCIO* Pro_ZC::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Input)
  return input_.Mutable(index);
}
inline ::Pro_ZCIO* Pro_ZC::add_input() {
  // @@protoc_insertion_point(field_add:Pro_ZC.Input)
  return input_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
Pro_ZC::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.Input)
  return &input_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
Pro_ZC::input() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.Input)
  return input_;
}

// repeated .Pro_ZCIO RELAY = 12;
inline int Pro_ZC::relay_size() const {
  return relay_.size();
}
inline void Pro_ZC::clear_relay() {
  relay_.Clear();
}
inline const ::Pro_ZCIO& Pro_ZC::relay(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.RELAY)
  return relay_.Get(index);
}
inline ::Pro_ZCIO* Pro_ZC::mutable_relay(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.RELAY)
  return relay_.Mutable(index);
}
inline ::Pro_ZCIO* Pro_ZC::add_relay() {
  // @@protoc_insertion_point(field_add:Pro_ZC.RELAY)
  return relay_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
Pro_ZC::mutable_relay() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.RELAY)
  return &relay_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
Pro_ZC::relay() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.RELAY)
  return relay_;
}

// repeated .Pro_ZCIO LOCAL_TROUBLES = 13;
inline int Pro_ZC::local_troubles_size() const {
  return local_troubles_.size();
}
inline void Pro_ZC::clear_local_troubles() {
  local_troubles_.Clear();
}
inline const ::Pro_ZCIO& Pro_ZC::local_troubles(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.LOCAL_TROUBLES)
  return local_troubles_.Get(index);
}
inline ::Pro_ZCIO* Pro_ZC::mutable_local_troubles(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.LOCAL_TROUBLES)
  return local_troubles_.Mutable(index);
}
inline ::Pro_ZCIO* Pro_ZC::add_local_troubles() {
  // @@protoc_insertion_point(field_add:Pro_ZC.LOCAL_TROUBLES)
  return local_troubles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
Pro_ZC::mutable_local_troubles() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.LOCAL_TROUBLES)
  return &local_troubles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
Pro_ZC::local_troubles() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.LOCAL_TROUBLES)
  return local_troubles_;
}

// repeated .Pro_ZCIO REMOTE_TROUBLE = 14;
inline int Pro_ZC::remote_trouble_size() const {
  return remote_trouble_.size();
}
inline void Pro_ZC::clear_remote_trouble() {
  remote_trouble_.Clear();
}
inline const ::Pro_ZCIO& Pro_ZC::remote_trouble(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.REMOTE_TROUBLE)
  return remote_trouble_.Get(index);
}
inline ::Pro_ZCIO* Pro_ZC::mutable_remote_trouble(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.REMOTE_TROUBLE)
  return remote_trouble_.Mutable(index);
}
inline ::Pro_ZCIO* Pro_ZC::add_remote_trouble() {
  // @@protoc_insertion_point(field_add:Pro_ZC.REMOTE_TROUBLE)
  return remote_trouble_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
Pro_ZC::mutable_remote_trouble() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.REMOTE_TROUBLE)
  return &remote_trouble_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
Pro_ZC::remote_trouble() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.REMOTE_TROUBLE)
  return remote_trouble_;
}

// repeated .Pro_ZCIO STATS = 15;
inline int Pro_ZC::stats_size() const {
  return stats_.size();
}
inline void Pro_ZC::clear_stats() {
  stats_.Clear();
}
inline const ::Pro_ZCIO& Pro_ZC::stats(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.STATS)
  return stats_.Get(index);
}
inline ::Pro_ZCIO* Pro_ZC::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.STATS)
  return stats_.Mutable(index);
}
inline ::Pro_ZCIO* Pro_ZC::add_stats() {
  // @@protoc_insertion_point(field_add:Pro_ZC.STATS)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >*
Pro_ZC::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.STATS)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_ZCIO >&
Pro_ZC::stats() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.STATS)
  return stats_;
}

// uint32 range = 16;
inline void Pro_ZC::clear_range() {
  range_ = 0u;
}
inline ::google::protobuf::uint32 Pro_ZC::range() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.range)
  return range_;
}
inline void Pro_ZC::set_range(::google::protobuf::uint32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:Pro_ZC.range)
}

// repeated string PassCode = 17;
inline int Pro_ZC::passcode_size() const {
  return passcode_.size();
}
inline void Pro_ZC::clear_passcode() {
  passcode_.Clear();
}
inline const ::std::string& Pro_ZC::passcode(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.PassCode)
  return passcode_.Get(index);
}
inline ::std::string* Pro_ZC::mutable_passcode(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.PassCode)
  return passcode_.Mutable(index);
}
inline void Pro_ZC::set_passcode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Pro_ZC.PassCode)
  passcode_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Pro_ZC::set_passcode(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Pro_ZC.PassCode)
  passcode_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Pro_ZC::set_passcode(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  passcode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Pro_ZC.PassCode)
}
inline void Pro_ZC::set_passcode(int index, const char* value, size_t size) {
  passcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.PassCode)
}
inline ::std::string* Pro_ZC::add_passcode() {
  // @@protoc_insertion_point(field_add_mutable:Pro_ZC.PassCode)
  return passcode_.Add();
}
inline void Pro_ZC::add_passcode(const ::std::string& value) {
  passcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Pro_ZC.PassCode)
}
#if LANG_CXX11
inline void Pro_ZC::add_passcode(::std::string&& value) {
  passcode_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Pro_ZC.PassCode)
}
#endif
inline void Pro_ZC::add_passcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  passcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Pro_ZC.PassCode)
}
inline void Pro_ZC::add_passcode(const char* value, size_t size) {
  passcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Pro_ZC.PassCode)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Pro_ZC::passcode() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.PassCode)
  return passcode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Pro_ZC::mutable_passcode() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.PassCode)
  return &passcode_;
}

// repeated .PRO_TIMER Timer = 18;
inline int Pro_ZC::timer_size() const {
  return timer_.size();
}
inline void Pro_ZC::clear_timer() {
  timer_.Clear();
}
inline const ::PRO_TIMER& Pro_ZC::timer(int index) const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Timer)
  return timer_.Get(index);
}
inline ::PRO_TIMER* Pro_ZC::mutable_timer(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Timer)
  return timer_.Mutable(index);
}
inline ::PRO_TIMER* Pro_ZC::add_timer() {
  // @@protoc_insertion_point(field_add:Pro_ZC.Timer)
  return timer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PRO_TIMER >*
Pro_ZC::mutable_timer() {
  // @@protoc_insertion_point(field_mutable_list:Pro_ZC.Timer)
  return &timer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PRO_TIMER >&
Pro_ZC::timer() const {
  // @@protoc_insertion_point(field_list:Pro_ZC.Timer)
  return timer_;
}

// int32 SCU_FEATURE_FLAGS = 19;
inline void Pro_ZC::clear_scu_feature_flags() {
  scu_feature_flags_ = 0;
}
inline ::google::protobuf::int32 Pro_ZC::scu_feature_flags() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.SCU_FEATURE_FLAGS)
  return scu_feature_flags_;
}
inline void Pro_ZC::set_scu_feature_flags(::google::protobuf::int32 value) {
  
  scu_feature_flags_ = value;
  // @@protoc_insertion_point(field_set:Pro_ZC.SCU_FEATURE_FLAGS)
}

// string Comment = 20;
inline void Pro_ZC::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_ZC::comment() const {
  // @@protoc_insertion_point(field_get:Pro_ZC.Comment)
  return comment_.GetNoArena();
}
inline void Pro_ZC::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_ZC.Comment)
}
#if LANG_CXX11
inline void Pro_ZC::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_ZC.Comment)
}
#endif
inline void Pro_ZC::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_ZC.Comment)
}
inline void Pro_ZC::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_ZC.Comment)
}
inline ::std::string* Pro_ZC::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:Pro_ZC.Comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_ZC::release_comment() {
  // @@protoc_insertion_point(field_release:Pro_ZC.Comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_ZC::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:Pro_ZC.Comment)
}

// -------------------------------------------------------------------

// Pro_Floor

// string Comment = 1;
inline void Pro_Floor::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::comment() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.Comment)
  return comment_.GetNoArena();
}
inline void Pro_Floor::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.Comment)
}
#if LANG_CXX11
inline void Pro_Floor::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.Comment)
}
#endif
inline void Pro_Floor::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.Comment)
}
inline void Pro_Floor::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.Comment)
}
inline ::std::string* Pro_Floor::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.Comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_comment() {
  // @@protoc_insertion_point(field_release:Pro_Floor.Comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.Comment)
}

// string FloorGraph = 2;
inline void Pro_Floor::clear_floorgraph() {
  floorgraph_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::floorgraph() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.FloorGraph)
  return floorgraph_.GetNoArena();
}
inline void Pro_Floor::set_floorgraph(const ::std::string& value) {
  
  floorgraph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.FloorGraph)
}
#if LANG_CXX11
inline void Pro_Floor::set_floorgraph(::std::string&& value) {
  
  floorgraph_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.FloorGraph)
}
#endif
inline void Pro_Floor::set_floorgraph(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  floorgraph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.FloorGraph)
}
inline void Pro_Floor::set_floorgraph(const char* value, size_t size) {
  
  floorgraph_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.FloorGraph)
}
inline ::std::string* Pro_Floor::mutable_floorgraph() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.FloorGraph)
  return floorgraph_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_floorgraph() {
  // @@protoc_insertion_point(field_release:Pro_Floor.FloorGraph)
  
  return floorgraph_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_floorgraph(::std::string* floorgraph) {
  if (floorgraph != NULL) {
    
  } else {
    
  }
  floorgraph_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floorgraph);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.FloorGraph)
}

// string GUID = 3;
inline void Pro_Floor::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::guid() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.GUID)
  return guid_.GetNoArena();
}
inline void Pro_Floor::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.GUID)
}
#if LANG_CXX11
inline void Pro_Floor::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.GUID)
}
#endif
inline void Pro_Floor::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.GUID)
}
inline void Pro_Floor::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.GUID)
}
inline ::std::string* Pro_Floor::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.GUID)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_guid() {
  // @@protoc_insertion_point(field_release:Pro_Floor.GUID)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.GUID)
}

// string Name = 4;
inline void Pro_Floor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::name() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.Name)
  return name_.GetNoArena();
}
inline void Pro_Floor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.Name)
}
#if LANG_CXX11
inline void Pro_Floor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.Name)
}
#endif
inline void Pro_Floor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.Name)
}
inline void Pro_Floor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.Name)
}
inline ::std::string* Pro_Floor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_name() {
  // @@protoc_insertion_point(field_release:Pro_Floor.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.Name)
}

// .Pro_Point Position = 5;
inline bool Pro_Floor::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Pro_Floor::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::Pro_Point& Pro_Floor::position() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.Position)
  return position_ != NULL ? *position_
                         : *::Pro_Point::internal_default_instance();
}
inline ::Pro_Point* Pro_Floor::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::Pro_Point;
  }
  // @@protoc_insertion_point(field_mutable:Pro_Floor.Position)
  return position_;
}
inline ::Pro_Point* Pro_Floor::release_position() {
  // @@protoc_insertion_point(field_release:Pro_Floor.Position)
  
  ::Pro_Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pro_Floor::set_allocated_position(::Pro_Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.Position)
}

// string Type = 6;
inline void Pro_Floor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::type() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.Type)
  return type_.GetNoArena();
}
inline void Pro_Floor::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.Type)
}
#if LANG_CXX11
inline void Pro_Floor::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.Type)
}
#endif
inline void Pro_Floor::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.Type)
}
inline void Pro_Floor::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.Type)
}
inline ::std::string* Pro_Floor::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_type() {
  // @@protoc_insertion_point(field_release:Pro_Floor.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.Type)
}

// .Pro_Point Scale = 7;
inline bool Pro_Floor::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline void Pro_Floor::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
inline const ::Pro_Point& Pro_Floor::scale() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.Scale)
  return scale_ != NULL ? *scale_
                         : *::Pro_Point::internal_default_instance();
}
inline ::Pro_Point* Pro_Floor::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::Pro_Point;
  }
  // @@protoc_insertion_point(field_mutable:Pro_Floor.Scale)
  return scale_;
}
inline ::Pro_Point* Pro_Floor::release_scale() {
  // @@protoc_insertion_point(field_release:Pro_Floor.Scale)
  
  ::Pro_Point* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void Pro_Floor::set_allocated_scale(::Pro_Point* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.Scale)
}

// string unit_of_measure = 8;
inline void Pro_Floor::clear_unit_of_measure() {
  unit_of_measure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::unit_of_measure() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.unit_of_measure)
  return unit_of_measure_.GetNoArena();
}
inline void Pro_Floor::set_unit_of_measure(const ::std::string& value) {
  
  unit_of_measure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.unit_of_measure)
}
#if LANG_CXX11
inline void Pro_Floor::set_unit_of_measure(::std::string&& value) {
  
  unit_of_measure_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.unit_of_measure)
}
#endif
inline void Pro_Floor::set_unit_of_measure(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_of_measure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.unit_of_measure)
}
inline void Pro_Floor::set_unit_of_measure(const char* value, size_t size) {
  
  unit_of_measure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.unit_of_measure)
}
inline ::std::string* Pro_Floor::mutable_unit_of_measure() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.unit_of_measure)
  return unit_of_measure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_unit_of_measure() {
  // @@protoc_insertion_point(field_release:Pro_Floor.unit_of_measure)
  
  return unit_of_measure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_unit_of_measure(::std::string* unit_of_measure) {
  if (unit_of_measure != NULL) {
    
  } else {
    
  }
  unit_of_measure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_of_measure);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.unit_of_measure)
}

// repeated .Pro_ZC ZC = 9;
inline int Pro_Floor::zc_size() const {
  return zc_.size();
}
inline void Pro_Floor::clear_zc() {
  zc_.Clear();
}
inline const ::Pro_ZC& Pro_Floor::zc(int index) const {
  // @@protoc_insertion_point(field_get:Pro_Floor.ZC)
  return zc_.Get(index);
}
inline ::Pro_ZC* Pro_Floor::mutable_zc(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_Floor.ZC)
  return zc_.Mutable(index);
}
inline ::Pro_ZC* Pro_Floor::add_zc() {
  // @@protoc_insertion_point(field_add:Pro_Floor.ZC)
  return zc_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_ZC >*
Pro_Floor::mutable_zc() {
  // @@protoc_insertion_point(field_mutable_list:Pro_Floor.ZC)
  return &zc_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_ZC >&
Pro_Floor::zc() const {
  // @@protoc_insertion_point(field_list:Pro_Floor.ZC)
  return zc_;
}

// string plotting_scale = 10;
inline void Pro_Floor::clear_plotting_scale() {
  plotting_scale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Floor::plotting_scale() const {
  // @@protoc_insertion_point(field_get:Pro_Floor.plotting_scale)
  return plotting_scale_.GetNoArena();
}
inline void Pro_Floor::set_plotting_scale(const ::std::string& value) {
  
  plotting_scale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Floor.plotting_scale)
}
#if LANG_CXX11
inline void Pro_Floor::set_plotting_scale(::std::string&& value) {
  
  plotting_scale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Floor.plotting_scale)
}
#endif
inline void Pro_Floor::set_plotting_scale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plotting_scale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Floor.plotting_scale)
}
inline void Pro_Floor::set_plotting_scale(const char* value, size_t size) {
  
  plotting_scale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Floor.plotting_scale)
}
inline ::std::string* Pro_Floor::mutable_plotting_scale() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Floor.plotting_scale)
  return plotting_scale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Floor::release_plotting_scale() {
  // @@protoc_insertion_point(field_release:Pro_Floor.plotting_scale)
  
  return plotting_scale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Floor::set_allocated_plotting_scale(::std::string* plotting_scale) {
  if (plotting_scale != NULL) {
    
  } else {
    
  }
  plotting_scale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plotting_scale);
  // @@protoc_insertion_point(field_set_allocated:Pro_Floor.plotting_scale)
}

// -------------------------------------------------------------------

// Pro_Job

// string Comment = 1;
inline void Pro_Job::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Job::comment() const {
  // @@protoc_insertion_point(field_get:Pro_Job.Comment)
  return comment_.GetNoArena();
}
inline void Pro_Job::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Job.Comment)
}
#if LANG_CXX11
inline void Pro_Job::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Job.Comment)
}
#endif
inline void Pro_Job::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Job.Comment)
}
inline void Pro_Job::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Job.Comment)
}
inline ::std::string* Pro_Job::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Job.Comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Job::release_comment() {
  // @@protoc_insertion_point(field_release:Pro_Job.Comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Job::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:Pro_Job.Comment)
}

// string GUID = 2;
inline void Pro_Job::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Job::guid() const {
  // @@protoc_insertion_point(field_get:Pro_Job.GUID)
  return guid_.GetNoArena();
}
inline void Pro_Job::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Job.GUID)
}
#if LANG_CXX11
inline void Pro_Job::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Job.GUID)
}
#endif
inline void Pro_Job::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Job.GUID)
}
inline void Pro_Job::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Job.GUID)
}
inline ::std::string* Pro_Job::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Job.GUID)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Job::release_guid() {
  // @@protoc_insertion_point(field_release:Pro_Job.GUID)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Job::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:Pro_Job.GUID)
}

// string JobPath = 3;
inline void Pro_Job::clear_jobpath() {
  jobpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Job::jobpath() const {
  // @@protoc_insertion_point(field_get:Pro_Job.JobPath)
  return jobpath_.GetNoArena();
}
inline void Pro_Job::set_jobpath(const ::std::string& value) {
  
  jobpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Job.JobPath)
}
#if LANG_CXX11
inline void Pro_Job::set_jobpath(::std::string&& value) {
  
  jobpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Job.JobPath)
}
#endif
inline void Pro_Job::set_jobpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jobpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Job.JobPath)
}
inline void Pro_Job::set_jobpath(const char* value, size_t size) {
  
  jobpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Job.JobPath)
}
inline ::std::string* Pro_Job::mutable_jobpath() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Job.JobPath)
  return jobpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Job::release_jobpath() {
  // @@protoc_insertion_point(field_release:Pro_Job.JobPath)
  
  return jobpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Job::set_allocated_jobpath(::std::string* jobpath) {
  if (jobpath != NULL) {
    
  } else {
    
  }
  jobpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jobpath);
  // @@protoc_insertion_point(field_set_allocated:Pro_Job.JobPath)
}

// string Name = 4;
inline void Pro_Job::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Job::name() const {
  // @@protoc_insertion_point(field_get:Pro_Job.Name)
  return name_.GetNoArena();
}
inline void Pro_Job::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Job.Name)
}
#if LANG_CXX11
inline void Pro_Job::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Job.Name)
}
#endif
inline void Pro_Job::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Job.Name)
}
inline void Pro_Job::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Job.Name)
}
inline ::std::string* Pro_Job::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Job.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Job::release_name() {
  // @@protoc_insertion_point(field_release:Pro_Job.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Job::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Pro_Job.Name)
}

// string Standard = 5;
inline void Pro_Job::clear_standard() {
  standard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Job::standard() const {
  // @@protoc_insertion_point(field_get:Pro_Job.Standard)
  return standard_.GetNoArena();
}
inline void Pro_Job::set_standard(const ::std::string& value) {
  
  standard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Job.Standard)
}
#if LANG_CXX11
inline void Pro_Job::set_standard(::std::string&& value) {
  
  standard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Job.Standard)
}
#endif
inline void Pro_Job::set_standard(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  standard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Job.Standard)
}
inline void Pro_Job::set_standard(const char* value, size_t size) {
  
  standard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Job.Standard)
}
inline ::std::string* Pro_Job::mutable_standard() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Job.Standard)
  return standard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Job::release_standard() {
  // @@protoc_insertion_point(field_release:Pro_Job.Standard)
  
  return standard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Job::set_allocated_standard(::std::string* standard) {
  if (standard != NULL) {
    
  } else {
    
  }
  standard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), standard);
  // @@protoc_insertion_point(field_set_allocated:Pro_Job.Standard)
}

// string Type = 6;
inline void Pro_Job::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pro_Job::type() const {
  // @@protoc_insertion_point(field_get:Pro_Job.Type)
  return type_.GetNoArena();
}
inline void Pro_Job::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro_Job.Type)
}
#if LANG_CXX11
inline void Pro_Job::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro_Job.Type)
}
#endif
inline void Pro_Job::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro_Job.Type)
}
inline void Pro_Job::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro_Job.Type)
}
inline ::std::string* Pro_Job::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Pro_Job.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pro_Job::release_type() {
  // @@protoc_insertion_point(field_release:Pro_Job.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pro_Job::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Pro_Job.Type)
}

// repeated .Pro_Floor Floor = 7;
inline int Pro_Job::floor_size() const {
  return floor_.size();
}
inline void Pro_Job::clear_floor() {
  floor_.Clear();
}
inline const ::Pro_Floor& Pro_Job::floor(int index) const {
  // @@protoc_insertion_point(field_get:Pro_Job.Floor)
  return floor_.Get(index);
}
inline ::Pro_Floor* Pro_Job::mutable_floor(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_Job.Floor)
  return floor_.Mutable(index);
}
inline ::Pro_Floor* Pro_Job::add_floor() {
  // @@protoc_insertion_point(field_add:Pro_Job.Floor)
  return floor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro_Floor >*
Pro_Job::mutable_floor() {
  // @@protoc_insertion_point(field_mutable_list:Pro_Job.Floor)
  return &floor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro_Floor >&
Pro_Job::floor() const {
  // @@protoc_insertion_point(field_list:Pro_Job.Floor)
  return floor_;
}

// repeated .PRO_DayLightSaving DayLight = 8;
inline int Pro_Job::daylight_size() const {
  return daylight_.size();
}
inline void Pro_Job::clear_daylight() {
  daylight_.Clear();
}
inline const ::PRO_DayLightSaving& Pro_Job::daylight(int index) const {
  // @@protoc_insertion_point(field_get:Pro_Job.DayLight)
  return daylight_.Get(index);
}
inline ::PRO_DayLightSaving* Pro_Job::mutable_daylight(int index) {
  // @@protoc_insertion_point(field_mutable:Pro_Job.DayLight)
  return daylight_.Mutable(index);
}
inline ::PRO_DayLightSaving* Pro_Job::add_daylight() {
  // @@protoc_insertion_point(field_add:Pro_Job.DayLight)
  return daylight_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PRO_DayLightSaving >*
Pro_Job::mutable_daylight() {
  // @@protoc_insertion_point(field_mutable_list:Pro_Job.DayLight)
  return &daylight_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PRO_DayLightSaving >&
Pro_Job::daylight() const {
  // @@protoc_insertion_point(field_list:Pro_Job.DayLight)
  return daylight_;
}

// int32 DailyAdjust = 9;
inline void Pro_Job::clear_dailyadjust() {
  dailyadjust_ = 0;
}
inline ::google::protobuf::int32 Pro_Job::dailyadjust() const {
  // @@protoc_insertion_point(field_get:Pro_Job.DailyAdjust)
  return dailyadjust_;
}
inline void Pro_Job::set_dailyadjust(::google::protobuf::int32 value) {
  
  dailyadjust_ = value;
  // @@protoc_insertion_point(field_set:Pro_Job.DailyAdjust)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fldata_2eproto__INCLUDED
